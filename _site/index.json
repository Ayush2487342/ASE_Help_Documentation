{
  "api/ASEProjectTest.ASE_Test_Project.CommandFactoryTest.html": {
    "href": "api/ASEProjectTest.ASE_Test_Project.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | ASE_Help_Documentation",
    "keywords": "Class CommandFactoryTest Namespace ASEProjectTest.ASE_Test_Project Assembly ASEProjectTest.dll Test class to verify the behavior of the AppCommandFactory and its command creation logic. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes a new instance of the Commands class before each test method is executed. [TestInitialize] public void SetUp() TestMakeCommand_Circle_ShouldReturnAppCircle() Verifies that the \"circle\" command creates an instance of Circles. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() TestMakeCommand_Clear_ShouldReturnClear() Verifies that the \"clear\" command creates an instance of Clear. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Verifies that the \"drawto\" command creates an instance of Draw. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() TestMakeCommand_Fill_ShouldReturnFill() Verifies that the \"fill\" command creates an instance of Filler. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Verifies that invalid commands trigger a BOOSE.FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Verifies that the \"moveto\" command creates an instance of Mover. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() TestMakeCommand_PenColour_ShouldReturnAppPenColour() Verifies that the \"pencolour\" command creates an instance of PenColourChanger. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() TestMakeCommand_PenSize_ShouldReturnPenSize() Verifies that the \"pensize\" command creates an instance of PenSize. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() TestMakeCommand_Rect_ShouldReturnAppRectangle() Verifies that the \"rect\" command creates an instance of Rectangles. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() TestMakeCommand_Reset_ShouldReturnReset() Verifies that the \"reset\" command creates an instance of Reset. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() TestMakeCommand_Tri_ShouldReturnTriangle() Verifies that the \"tri\" command creates an instance of Triangle. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() TestMakeCommand_WriteTo_ShouldReturnWriteTo() Verifies that the \"writeto\" command creates an instance of Writeto. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo()"
  },
  "api/ASEProjectTest.ASE_Test_Project.html": {
    "href": "api/ASEProjectTest.ASE_Test_Project.html",
    "title": "Namespace ASEProjectTest.ASE_Test_Project | ASE_Help_Documentation",
    "keywords": "Namespace ASEProjectTest.ASE_Test_Project Classes CommandFactoryTest Test class to verify the behavior of the AppCommandFactory and its command creation logic."
  },
  "api/ASEProjectTest.AppPraserTests.html": {
    "href": "api/ASEProjectTest.AppPraserTests.html",
    "title": "Class AppPraserTests | ASE_Help_Documentation",
    "keywords": "Class AppPraserTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Unit test class for testing the functionality of the AppPraser class. [TestClass] public class AppPraserTests Inheritance object AppPraserTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes instances of required components before each test. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Tests that the ParseCommand(string) method returns a valid ICommand instance when provided with a known command. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "api/ASEProjectTest.GlobalConfigTest.html": {
    "href": "api/ASEProjectTest.GlobalConfigTest.html",
    "title": "Class GlobalConfigTest | ASE_Help_Documentation",
    "keywords": "Class GlobalConfigTest Namespace ASEProjectTest Assembly ASEProjectTest.dll Tests to ensure that the GlobalConfig static properties behave as expected. [TestClass] public class GlobalConfigTest Inheritance object GlobalConfigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSetAndGetIsFillEnabled() Tests that the IsFillEnabled property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests that the MaxX property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests that the MaxY property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests that the PenSize property can be set and retrieved correctly. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "api/ASEProjectTest.MyAppCanvasTest.html": {
    "href": "api/ASEProjectTest.MyAppCanvasTest.html",
    "title": "Class MyAppCanvasTest | ASE_Help_Documentation",
    "keywords": "Class MyAppCanvasTest Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the AppCanvas class, verifying correct behavior for various canvas operations. [TestClass] public sealed class MyAppCanvasTest Inheritance object MyAppCanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields canvas public AppCanvas canvas Field Value AppCanvas Methods SetUp() Sets up the canvas instance before each test. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Verifies behavior when pen positions are set beyond the canvas boundaries. [TestMethod] public void TestBoundaryPenPosition() TestCustomCanvasSizeInitialization() Tests the custom initialization of canvas dimensions. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDefaultConstructor() Verifies that the AppCanvas is initialized with the correct default values. [TestMethod] public void TestDefaultConstructor() TestDrawCircleInvalidRadius() Tests the drawing of a circle with an invalid radius. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Verifies drawing a valid circle on the canvas. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Verifies that exceeding maximum canvas dimensions throws the expected exception. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestInvalidCanvasSize_ShouldThrowCanvasException() Verifies that setting invalid canvas sizes throws the expected exceptions. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Tests the resetting of the canvas to its default state. [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Tests setting valid pen colors. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Verifies that invalid pen positions are correctly handled by resetting to defaults. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Tests setting valid pen positions on the canvas. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Ensures that invalid pen sizes are handled correctly by the canvas. [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Verifies that valid pen sizes are correctly set. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests toggling the filled state of shapes drawn on the canvas. [TestMethod] public void TestToggleShapeFilling()"
  },
  "api/ASEProjectTest.MyCircleUnitTests.html": {
    "href": "api/ASEProjectTest.MyCircleUnitTests.html",
    "title": "Class MyCircleUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyCircleUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Circle class to verify its construction and parameter validation. [TestClass] public class MyCircleUnitTests Inheritance object MyCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that the CheckParameters method does not throw any exceptions when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Verifies that the Circle constructor initializes correctly when provided with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes resources before each test is run. Here, it sets up a mock of the Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyClearUnitTests.html": {
    "href": "api/ASEProjectTest.MyClearUnitTests.html",
    "title": "Class MyClearUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyClearUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Clear class to verify its behavior in various scenarios, particularly focusing on the clearing functionality of the Canvas. [TestClass] public class MyClearUnitTests Inheritance object MyClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that the CheckParameters method ignores any unexpected parameters without throwing an exception. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Verifies that the CheckParameters method does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Verifies that the CheckParameters method does not throw an exception when no parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the Clear constructor initializes correctly when a valid Canvas is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Verifies that the Execute method calls the Clear method on the Canvas exactly once when the Canvas is valid. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Verifies that executing the Clear command without a canvas set up properly results in a NullReferenceException, demonstrating the command's reliance on a valid canvas object. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Tests that the Execute method does not throw an exception when executed on an empty Canvas. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Sets up the test environment before each test, initializing a mock of the Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyDrawToUnitTests.html": {
    "href": "api/ASEProjectTest.MyDrawToUnitTests.html",
    "title": "Class MyDrawToUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyDrawToUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for Draw class to verify correct initialization and parameter validation. [TestClass] public class MyDrawToUnitTests Inheritance object MyDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Draw constructor initializes correctly when provided with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Verifies that the Draw constructor throws a RestrictionException when initialized with negative coordinates. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Sets the test environment before each test by initializing a mock of the Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyFillUnitTests.html": {
    "href": "api/ASEProjectTest.MyFillUnitTests.html",
    "title": "Class MyFillUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyFillUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Filler class, focusing on initialization and execution with various parameter conditions. [TestClass] public class MyFillUnitTests Inheritance object MyFillUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() Tests that the CheckParameters method throws a CommandException when more than one parameter is provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenMoreThanOneParameterProvided() CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() Tests that the CheckParameters method throws a CommandException when no parameters are provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenNoParametersProvided() CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() Tests that the CheckParameters method throws a CommandException when an empty parameter is provided. [TestMethod] public void CheckParameters_ShouldThrowCommandException_WhenParameterIsEmpty() Constructor_ShouldInitialize_WhenTextIsValid() Verifies that the constructor initializes correctly when a valid text parameter is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() Tests that the constructor throws an ArgumentNullException when text parameter is null. [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Tests that the Execute method throws a RestrictionException when the text exceeds acceptable length limits. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextExceedsLength() Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() Tests that the Execute method throws a RestrictionException when the text is whitespace. [TestMethod] public void Execute_ShouldThrowRestrictionException_WhenTextIsWhitespace() TestInitialize() Initializes a mock Canvas object before each test. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyMoveToUnitTests.html": {
    "href": "api/ASEProjectTest.MyMoveToUnitTests.html",
    "title": "Class MyMoveToUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyMoveToUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Mover class to verify the behavior of moving to specified coordinates on a canvas. [TestClass] public class MyMoveToUnitTests Inheritance object MyMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method does not throw an exception when provided with valid coordinates. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Mover constructor initializes correctly when provided with valid coordinates. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Verifies that the Mover constructor throws a RestrictionException when coordinates exceed the defined limits. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Initializes resources before each test. Here, it sets up a mock of the Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyPenColourUnitTests.html": {
    "href": "api/ASEProjectTest.MyPenColourUnitTests.html",
    "title": "Class MyPenColourUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyPenColourUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the PenColourChanger class, focusing on the initialization and parameter validation to ensure proper handling of RGB values. [TestClass] public class MyPenColourUnitTests Inheritance object MyPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that the CheckParameters method does not throw an exception when provided with valid RGB parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the PenColourChanger constructor initializes correctly when provided with valid RGB color parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Sets up the test environment before each test by initializing a mock of the Canvas object. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyRectangleUnitTests.html": {
    "href": "api/ASEProjectTest.MyRectangleUnitTests.html",
    "title": "Class MyRectangleUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyRectangleUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Rectangle class to ensure it properly initializes and validates parameters for drawing rectangles on a canvas. [TestClass] public class MyRectangleUnitTests Inheritance object MyRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that the CheckParameters method does not throw an exception when provided with valid width and height values, ensuring that the Rectangle can correctly handle correct parameter input. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Rectangle constructor initializes correctly when provided with valid parameters for width and height. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Sets up the test environment before each test by initializing a mock of the Canvas object. This preparation ensures that the canvas dependency is mocked correctly for all tests. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyResetsUnitTests.html": {
    "href": "api/ASEProjectTest.MyResetsUnitTests.html",
    "title": "Class MyResetsUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyResetsUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Reset class to verify the behavior of the Reset functionality on a canvas. [TestClass] public class MyResetsUnitTests Inheritance object MyResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Ensures that the CheckParameters method ignores any unexpected parameters without throwing an exception. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that the CheckParameters method does not throw an exception when the parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Verifies that the CheckParameters method does not throw an exception when no parameters are provided. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the Reset constructor initializes correctly when a valid Canvas is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Verifies that executing the Reset command without a Canvas throws a NullReferenceException, testing error handling when no canvas is set. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() Initializes a mock Canvas object before each test to ensure a controlled testing environment. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyTriangleTests.html": {
    "href": "api/ASEProjectTest.MyTriangleTests.html",
    "title": "Class MyTriangleTests | ASE_Help_Documentation",
    "keywords": "Class MyTriangleTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Triangle class to verify correct initialization and parameter handling for triangle shapes on a canvas. [TestClass] public class MyTriangleTests Inheritance object MyTriangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that the CheckParameters method of the Triangle command does not throw exceptions when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Triangle constructor initializes correctly when provided with valid dimensions for base length and height. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldSetBaseLengthAndHeightCorrectly() Verifies that the Triangle constructor sets the base length and height correctly based on provided values. [TestMethod] public void Constructor_ShouldSetBaseLengthAndHeightCorrectly() TestInitialize() Initializes a mock Canvas object before each test to provide a controlled environment for testing Triangle command initialization and execution. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.MyWriteToUnitTests.html": {
    "href": "api/ASEProjectTest.MyWriteToUnitTests.html",
    "title": "Class MyWriteToUnitTests | ASE_Help_Documentation",
    "keywords": "Class MyWriteToUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the Write class to ensure correct initialization and parameter validation for writing text on a canvas. [TestClass] public class MyWriteToUnitTests Inheritance object MyWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParameterIsValid() Verifies that the CheckParameters method of the Write command does not throw an exception when provided with valid text. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParameterIsValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the Write constructor initializes correctly when provided with valid text parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes a mock Canvas object before each test to provide a controlled environment for testing the Write command initialization and execution. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.PenSizeUnitTests.html": {
    "href": "api/ASEProjectTest.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | ASE_Help_Documentation",
    "keywords": "Class PenSizeUnitTests Namespace ASEProjectTest Assembly ASEProjectTest.dll Contains unit tests for the PenSize class to verify that it correctly initializes and manipulates pen size settings on a canvas. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that the CheckParameters method of the PenSize command does not throw an exception when provided with a valid parameter. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests that the PenSize constructor initializes correctly when provided with valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Tests that the Execute method correctly handles a boundary value of zero, setting the global pen size accordingly. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Initializes a mock Canvas object before each test to provide a controlled environment for testing the PenSize command. [TestInitialize] public void TestInitialize()"
  },
  "api/ASEProjectTest.html": {
    "href": "api/ASEProjectTest.html",
    "title": "Namespace ASEProjectTest | ASE_Help_Documentation",
    "keywords": "Namespace ASEProjectTest Classes AppPraserTests Unit test class for testing the functionality of the AppPraser class. GlobalConfigTest Tests to ensure that the GlobalConfig static properties behave as expected. MyAppCanvasTest Contains unit tests for the AppCanvas class, verifying correct behavior for various canvas operations. MyCircleUnitTests Contains unit tests for the Circle class to verify its construction and parameter validation. MyClearUnitTests Contains unit tests for the Clear class to verify its behavior in various scenarios, particularly focusing on the clearing functionality of the Canvas. MyDrawToUnitTests Contains unit tests for Draw class to verify correct initialization and parameter validation. MyFillUnitTests Contains unit tests for the Filler class, focusing on initialization and execution with various parameter conditions. MyMoveToUnitTests Contains unit tests for the Mover class to verify the behavior of moving to specified coordinates on a canvas. MyPenColourUnitTests Contains unit tests for the PenColourChanger class, focusing on the initialization and parameter validation to ensure proper handling of RGB values. MyRectangleUnitTests Contains unit tests for the Rectangle class to ensure it properly initializes and validates parameters for drawing rectangles on a canvas. MyResetsUnitTests Contains unit tests for the Reset class to verify the behavior of the Reset functionality on a canvas. MyTriangleTests Contains unit tests for the Triangle class to verify correct initialization and parameter handling for triangle shapes on a canvas. MyWriteToUnitTests Contains unit tests for the Write class to ensure correct initialization and parameter validation for writing text on a canvas. PenSizeUnitTests Contains unit tests for the PenSize class to verify that it correctly initializes and manipulates pen size settings on a canvas."
  },
  "api/ASE_Test_Project.CommandUnitTests.html": {
    "href": "api/ASE_Test_Project.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE_Help_Documentation",
    "keywords": "Class CommandUnitTests Namespace ASE_Test_Project Assembly ASEProjectTest.dll Contains unit tests for command execution within the application. [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class ensures that command execution is properly isolated without altering the global state. It utilizes mock dependencies to test interactions between components such as the command factory, parser, and stored program. Methods Setup() Initializes mock objects and dependencies before each test to ensure a consistent test environment. [TestInitialize] public void Setup() Remarks Called before each test method runs. Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Verifies that executing multiple commands sequentially does not trigger any exceptions or alter global output messages. [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Tests that executing a predefined sequence of commands does not change the global output exception message. [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that executing a single valid command does not produce an exception or change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg()"
  },
  "api/ASE_Test_Project.html": {
    "href": "api/ASE_Test_Project.html",
    "title": "Namespace ASE_Test_Project | ASE_Help_Documentation",
    "keywords": "Namespace ASE_Test_Project Classes CommandUnitTests Contains unit tests for command execution within the application."
  },
  "api/Ase_AyushK.C._77356749.AppArray.html": {
    "href": "api/Ase_AyushK.C._77356749.AppArray.html",
    "title": "Class AppArray | ASE_Help_Documentation",
    "keywords": "Class AppArray Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Manages an array with dynamic type support, enabling operations such as initialization, indexing, and value manipulation. public class AppArray : Evaluation, ICommand Inheritance object Command Evaluation AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Constructor for initializing the AppArray instance. public AppArray() Fields IntValue protected int IntValue Field Value int PEEK protected const bool PEEK = false Field Value bool POKE public const bool POKE = true Field Value bool RealValue protected double RealValue Field Value double columnCurrent protected int columnCurrent Field Value int columnExpression protected string columnExpression Field Value string columnsCount protected int columnsCount Field Value int intArray protected int[,] intArray Field Value int[,] peekValue protected string peekValue Field Value string pokeValue protected string pokeValue Field Value string realArray protected double[,] realArray Field Value double[,] rowCurrent protected int rowCurrent Field Value int rowExpression protected string rowExpression Field Value string rowsCount protected int rowsCount Field Value int type protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Enforces any restrictions specific to the array operations. public void ArrayRestrictions() CheckParameters(string[]) Validates the parameters for array configuration and operations. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter count is incorrect for array configuration. Compile() Compiles the array command by validating and setting up the necessary parameters. public override void Compile() Exceptions CommandException Thrown when the array parameters are invalid. Execute() Executes the array operations based on the compiled parameters and settings. public override void Execute() Exceptions CommandException Thrown if the specified array type is unsupported. GetIntArray(int, int) Retrieves an integer value from a specified index within the integer array. public virtual int GetIntArray(int row, int col) Parameters row int The row index from which to retrieve the value. col int The column index from which to retrieve the value. Returns int The integer value at the specified index. GetRealArray(int, int) Retrieves a double value from a specified index within the real array. public virtual double GetRealArray(int row, int col) Parameters row int The row index from which to retrieve the value. col int The column index from which to retrieve the value. Returns double The double value at the specified index. ProcessArrayParametersCompile(bool) Processes compile-time parameters for array operations, identifying the operation type (poke or peek). protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke (true) or peek (false). Exceptions CommandException Thrown if array operation syntax is invalid. ProcessArrayParametersExecute(bool) Executes array operations at runtime, ensuring all indices and values are resolved correctly. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke (true) or peek (false). Exceptions CommandException Thrown if indices or values are invalid for the operation. ReduceRestrictionCounter() Reduces the internal counter used for tracking restrictions or limitations. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets an integer value at a specified index within the integer array. public virtual void SetIntArray(int value, int row, int col) Parameters value int The integer value to set. row int The row index where the value should be set. col int The column index where the value should be set. SetRealArray(double, int, int) Sets a double value at a specified index within the real array. public virtual void SetRealArray(double value, int row, int col) Parameters value double The double value to set. row int The row index where the value should be set. col int The column index where the value should be set."
  },
  "api/Ase_AyushK.C._77356749.AppBoolean.html": {
    "href": "api/Ase_AyushK.C._77356749.AppBoolean.html",
    "title": "Class AppBoolean | ASE_Help_Documentation",
    "keywords": "Class AppBoolean Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a specialized boolean with customized restrictions. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Defines restrictions specific to this boolean. This method is meant to be overridden in derived classes to implement specific restrictions. public override void Restrictions()"
  },
  "api/Ase_AyushK.C._77356749.AppCanvas.html": {
    "href": "api/Ase_AyushK.C._77356749.AppCanvas.html",
    "title": "Class AppCanvas | ASE_Help_Documentation",
    "keywords": "Class AppCanvas Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering onhe canvas. Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default canvas size. public AppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled public bool Filled { get; set; } Property Value bool PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). Any previous drawing operations will not be affected, but the next drawing operations will begin from the top-left corner of the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/Ase_AyushK.C._77356749.AppCast.html": {
    "href": "api/Ase_AyushK.C._77356749.AppCast.html",
    "title": "Class AppCast | ASE_Help_Documentation",
    "keywords": "Class AppCast Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command that facilitates type conversion between different types of variables within the application, specifically casting from a real number to an integer. public class AppCast : Command, ICommand Inheritance object Command AppCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Checks and validates the parameters provided to the casting command, ensuring they conform to expectations. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters for the command. Exceptions CommandException Thrown if the number of provided parameters is not exactly two. Compile() Prepares the command for execution by ensuring that the variables specified exist within the program and can be cast appropriately. public override void Compile() Exceptions CommandException Thrown if either of the specified variables do not exist or if an inappropriate cast is attempted. Execute() Executes the casting operation by converting the value from a real number variable to an integer variable. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.AppClear.html": {
    "href": "api/Ase_AyushK.C._77356749.AppClear.html",
    "title": "Class AppClear | ASE_Help_Documentation",
    "keywords": "Class AppClear Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command to clear all elements from a canvas. public class AppClear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter AppClear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppClear() Initializes a new instance of the AppClear class without parameters. public AppClear() AppClear(Canvas) Initializes a new instance of the AppClear class with a specified canvas. public AppClear(Canvas c) Parameters c Canvas The canvas to associate with this command. Methods CheckParameters(string[]) Checks the parameters for the clear command. This command does not require any parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters for the command. Execute() Executes the clear command on the canvas, removing all elements. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.AppConditionalCommand.html": {
    "href": "api/Ase_AyushK.C._77356749.AppConditionalCommand.html",
    "title": "Class AppConditionalCommand | ASE_Help_Documentation",
    "keywords": "Class AppConditionalCommand Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a conditional command with additional functionality to reset or update a private field. public class AppConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the private field to 0. public override void Execute() Remarks This method runs the base execution logic and then resets the private static field 뇀 to 0. ResetOrDecreaseCount(int) Updates the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to assign to the private field. Exceptions BOOSEException Thrown if the private field cannot be accessed using reflection."
  },
  "api/Ase_AyushK.C._77356749.AppElse.html": {
    "href": "api/Ase_AyushK.C._77356749.AppElse.html",
    "title": "Class AppElse | ASE_Help_Documentation",
    "keywords": "Class AppElse Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents an 'else' command within the application, forming part of the conditional command structure. public class AppElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrespondingEnd Gets or sets the corresponding 'end' command that marks the end of the 'else' block. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Checks if the provided parameters are valid for the 'else' command. public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters to check. Exceptions CommandException Thrown when parameters do not match expected format. Compile() Compiles the 'else' command by linking it with the corresponding command and setting line numbers. public override void Compile() Execute() Executes the 'else' command by checking conditions and managing program control flow. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.AppEnd.html": {
    "href": "api/Ase_AyushK.C._77356749.AppEnd.html",
    "title": "Class AppEnd | ASE_Help_Documentation",
    "keywords": "Class AppEnd Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll AppEnd class extends ApplicationCompoundCommand to provide handling for ending syntax in control structures like if, while, and for loops. public class AppEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class. public AppEnd() Methods Compile() Compiles the end command by checking the top of the command stack and ensuring proper end command syntax is used. public override void Compile() Exceptions CommandException Thrown when the syntax for the corresponding command end is incorrect. Execute() Executes the end command logic to manage the flow of control structures like loops and conditional blocks. public override void Execute() Exceptions CommandException Thrown for errors in the execution flow or control variable existence."
  },
  "api/Ase_AyushK.C._77356749.AppFor.html": {
    "href": "api/Ase_AyushK.C._77356749.AppFor.html",
    "title": "Class AppFor | ASE_Help_Documentation",
    "keywords": "Class AppFor Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll A class that extends BOOSE.For to include methods for modifying a private field in BOOSE.Boolean. public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Runs the base logic and resets the field to 0. public override void Execute() ResetOrDecreaseCount(int) Changes the value of a private static field in BOOSE.Boolean. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the field. Exceptions BOOSEException Thrown if the field cannot be accessed."
  },
  "api/Ase_AyushK.C._77356749.AppIf.html": {
    "href": "api/Ase_AyushK.C._77356749.AppIf.html",
    "title": "Class AppIf | ASE_Help_Documentation",
    "keywords": "Class AppIf Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents an 'if' command within the application, inheriting behavior from the ApplicationCompoundCommand. This class allows the execution of conditional logic based on specific criteria. public class AppIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand AppIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Initializes a new instance of the AppIf class. public AppIf() Methods ReduceRestrictions() Reduces the restrictions or limitations applied to this command's usage within the application. This method is intended to be overridden in derived classes to implement specific behaviors regarding the reduction of restrictions. protected void ReduceRestrictions()"
  },
  "api/Ase_AyushK.C._77356749.AppInt.html": {
    "href": "api/Ase_AyushK.C._77356749.AppInt.html",
    "title": "Class AppInt | ASE_Help_Documentation",
    "keywords": "Class AppInt Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll AppInt class extends the Int class to implement application-specific restrictions related to integer operations. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces application-specific restrictions on integer operations. public override void Restrictions()"
  },
  "api/Ase_AyushK.C._77356749.AppPeek.html": {
    "href": "api/Ase_AyushK.C._77356749.AppPeek.html",
    "title": "Class AppPeek | ASE_Help_Documentation",
    "keywords": "Class AppPeek Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Provides functionality for the \"peek\" operation on arrays, which is used to retrieve a value at a specified index. This class extends AppArray to provide specific functionality for the peek operation. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPeek Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Checks the validity of parameters provided for the peek operation. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of strings representing the parameters for the peek operation. Exceptions NotImplementedException Indicates that the parameter validation logic is not yet implemented. Compile() Compiles the peek operation by processing the parameters specifically for compilation purposes, ensuring all references and indices are valid within the context of the program. public override void Compile() Execute() Executes the peek operation by retrieving a value from the array at the specified index and updating the program's context. public override void Execute() Exceptions CommandException Thrown if the array type is unsupported for a peek operation."
  },
  "api/Ase_AyushK.C._77356749.AppPoke.html": {
    "href": "api/Ase_AyushK.C._77356749.AppPoke.html",
    "title": "Class AppPoke | ASE_Help_Documentation",
    "keywords": "Class AppPoke Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Provides functionality for the \"poke\" operation on arrays, which is used to set a value at a specified index. This class extends AppArray to provide specific functionality for the poke operation. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPoke Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Checks the validity of parameters provided for the poke operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of strings representing the parameters for the poke operation. Exceptions CommandException Thrown when the number of parameters is not 2 or 3, which are required for a valid poke operation. Compile() Compiles the poke operation by processing the parameters specifically for compilation purposes. public override void Compile() Execute() Executes the poke operation by setting a value in the array at the specified index according to the provided parameters. public override void Execute() Set(StoredProgram, string) Sets the internal state of this AppPoke instance using the specified program context and parameter list. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The program context in which this operation is set. paramsList string A comma-separated list of parameters for the operation."
  },
  "api/Ase_AyushK.C._77356749.AppPraser.html": {
    "href": "api/Ase_AyushK.C._77356749.AppPraser.html",
    "title": "Class AppPraser | ASE_Help_Documentation",
    "keywords": "Class AppPraser Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Provides functionality to parse and execute commands within a stored program. public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppPraser(CommandFactory, StoredProgram) Initializes a new instance of the AppParser class with specified command factory and stored program. public AppPraser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The factory used to create command instances. program StoredProgram The program where commands are stored and managed. Methods ParseCommand(string) Parses a line of text and returns the corresponding command object. public virtual ICommand ParseCommand(string line) Parameters line string The line to be parsed into a command. Returns ICommand The ICommand object representing the parsed command. Exceptions ParserException Thrown when the line contains an undefined variable or unknown variable type. ParseProgram(string) Parses a program script, executing each command line by line and recording any syntax errors. public virtual void ParseProgram(string program) Parameters program string The program script to be parsed."
  },
  "api/Ase_AyushK.C._77356749.AppReal.html": {
    "href": "api/Ase_AyushK.C._77356749.AppReal.html",
    "title": "Class AppReal | ASE_Help_Documentation",
    "keywords": "Class AppReal Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents an application-specific implementation of the BOOSE.Real class. This class provides specific behaviors that are tailored to meet the application's requirements and constraints. public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppReal() Initializes a new instance of the AppReal class. public AppReal() Methods Restrictions() Enforces application-specific restrictions on real number operations. This method is designed to override the base class method to implement custom logic that adheres to the specific business rules or constraints of the application. public override void Restrictions() Remarks This method should contain logic to enforce restrictions such as range limits or precision requirements specific to the application's context."
  },
  "api/Ase_AyushK.C._77356749.ApplicationCompoundCommand.html": {
    "href": "api/Ase_AyushK.C._77356749.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE_Help_Documentation",
    "keywords": "Class ApplicationCompoundCommand Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a compound command that integrates with conditional commands to facilitate complex control flow operations. public class ApplicationCompoundCommand : AppConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand Implements ICommand Derived AppElse AppEnd AppIf ApplicationWhile Inherited Members AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() Constructs a new instance of ApplicationCompoundCommand, initializing any necessary components or settings. public ApplicationCompoundCommand() Properties CorrespondingCommand Gets or sets the conditional command related to this compound command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Validates the provided parameters to ensure they meet expected criteria for executing the command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to be validated before command execution. Exceptions CommandException Thrown when the number of parameters provided does not meet the expected count or the content of the parameters is invalid. Compile() Compiles the command, preparing it for execution, ensuring all necessary pre-execution steps are handled. public override void Compile() ResetOrDecreaseCount(int) Modifies the internal state of a private static field within the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the specified field. Exceptions BOOSEException Thrown when the specified field cannot be accessed or modified."
  },
  "api/Ase_AyushK.C._77356749.ApplicationStoredProgram.html": {
    "href": "api/Ase_AyushK.C._77356749.ApplicationStoredProgram.html",
    "title": "Class ApplicationStoredProgram | ASE_Help_Documentation",
    "keywords": "Class ApplicationStoredProgram Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents an application-specific stored program that manages commands and variables for execution. public class ApplicationStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram ApplicationStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationStoredProgram(ICanvas) Constructs a new instance of ApplicationStoredProgram with a given canvas. public ApplicationStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas interface used for drawing operations. Fields SyntaxOk public bool SyntaxOk Field Value bool Properties PC Gets or sets the current position in the program's command sequence. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the stored program. public override int Add(Command C) Parameters C Command The command to add. Returns int An integer representing the position of the added command. AddMethod(Method) Adds a method to the stored program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the program's variable list. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Checks if there are more commands left to execute. public override bool Commandsleft() Returns bool True if there are more commands to execute, otherwise false. DeleteVariable(string) Deletes a variable from the variable list. public override void DeleteVariable(string varName) Parameters varName string Name of the variable to delete. EvaluateExpression(string) Evaluates a mathematical expression and returns the result as a string. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The result of the evaluation. EvaluateExpressionWithString(string) Evaluates a string expression and concatenates the results. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The concatenated result of the expression. FindVariable(string) Finds a variable by name and returns its index. public override int FindVariable(string varName) Parameters varName string Name of the variable to find. Returns int Index of the variable in the list or -1 if not found. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string Name of the method to retrieve. Returns Method The requested method object. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string Name of the variable. Returns string String representation of the variable's value. GetVariable(int) Retrieves a variable by its index in the variable list. public override Evaluation GetVariable(int index) Parameters index int Index of the variable to retrieve. Returns Evaluation The variable object. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string Name of the variable to retrieve. Returns Evaluation The variable object. IsExpression(string) Determines if a string is an expression. public override bool IsExpression(string expression) Parameters expression string The string to evaluate. Returns bool True if the string contains arithmetic operators or is not a simple integer. NextCommand() Retrieves the next command in the sequence. public override object NextCommand() Returns object The next command to be executed. Pop() Pops a conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The conditional command popped from the stack. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the stored program, clearing all commands and variables. public virtual void ResetProgram() Run() Executes the stored program until all commands are processed or an error occurs. public override void Run() UpdateVariable(string, bool) Updates the value of a specified variable with a boolean value. public override void UpdateVariable(string varName, bool value) Parameters varName string Name of the variable to update. value bool New boolean value for the variable. UpdateVariable(string, double) Updates the value of a specified variable with a double value. public override void UpdateVariable(string varName, double value) Parameters varName string Name of the variable to update. value double New double value for the variable. UpdateVariable(string, int) Updates the value of a specified variable. public override void UpdateVariable(string varName, int value) Parameters varName string Name of the variable to update. value int New integer value for the variable. VariableExists(string) Checks if a variable with a specified name exists in the variable list. public override bool VariableExists(string varName) Parameters varName string Name of the variable to check. Returns bool True if the variable exists, otherwise false."
  },
  "api/Ase_AyushK.C._77356749.ApplicationWhile.html": {
    "href": "api/Ase_AyushK.C._77356749.ApplicationWhile.html",
    "title": "Class ApplicationWhile | ASE_Help_Documentation",
    "keywords": "Class ApplicationWhile Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a 'while' command within the application, inheriting behavior from the ApplicationCompoundCommand. public class ApplicationWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppConditionalCommand ApplicationCompoundCommand ApplicationWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) AppConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationWhile() Initializes a new instance of the ApplicationWhile class. public ApplicationWhile() Methods ReduceRestrictions() Reduces the restrictions placed on the use of this command. This method is meant to be overridden in derived classes to specify particular behaviors regarding command restrictions. protected void ReduceRestrictions()"
  },
  "api/Ase_AyushK.C._77356749.Circles.html": {
    "href": "api/Ase_AyushK.C._77356749.Circles.html",
    "title": "Class Circles | ASE_Help_Documentation",
    "keywords": "Class Circles Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command to draw a circle on a canvas with a specified radius. public class Circles : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Circles Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Circles() Initializes a new instance of the Circles class without parameters. public Circles() Circles(Canvas, int) Initializes a new instance of the Circles class with a specified canvas and radius. public Circles(Canvas canvas, int radius) Parameters canvas Canvas The canvas on which the circle will be drawn. radius int The radius of the circle to draw. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the number of parameters is incorrect or the radius value is invalid. Execute() Executes the drawing of a circle on the canvas. public override void Execute() Exceptions IndexOutOfRangeException Thrown when the parameter index is out of range. RestrictionException Thrown when the radius exceeds the allowed maximum of 2000. Exception Thrown when an unexpected error occurs."
  },
  "api/Ase_AyushK.C._77356749.Clear.html": {
    "href": "api/Ase_AyushK.C._77356749.Clear.html",
    "title": "Class Clear | ASE_Help_Documentation",
    "keywords": "Class Clear Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Provides functionality to clear all elements from a canvas. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Initializes a new instance of the Clear class. public Clear() Clear(Canvas) Initializes a new instance of the Clear class with the specified canvas. public Clear(Canvas c) Parameters c Canvas The canvas to clear. Methods CheckParameters(string[]) Verifies the parameters for the clear command. This command does not require parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters (unused for this command). Execute() Executes the clear command on the canvas, removing all elements. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.Commands.html": {
    "href": "api/Ase_AyushK.C._77356749.Commands.html",
    "title": "Class Commands | ASE_Help_Documentation",
    "keywords": "Class Commands Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Provides a factory for creating command objects based on string identifiers. This class extends BOOSE.CommandFactory and is responsible for creating various command instances. public class Commands : CommandFactory, ICommandFactory Inheritance object CommandFactory Commands Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Commands() Initializes a new instance of the Commands class. public Commands() Methods MakeCommand(string) Creates an instance of a command based on the provided command string. public override ICommand MakeCommand(string command) Parameters command string The string identifier for the command to be created. Returns ICommand An instance of a class implementing BOOSE.ICommand that corresponds to the given command string. Exceptions FactoryException Thrown when an unrecognized command string is provided."
  },
  "api/Ase_AyushK.C._77356749.Draw.html": {
    "href": "api/Ase_AyushK.C._77356749.Draw.html",
    "title": "Class Draw | ASE_Help_Documentation",
    "keywords": "Class Draw Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Provides functionality to execute a draw command on a canvas at specified coordinates. public class Draw : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Draw Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Draw() Initializes a new instance of the Draw class without parameters. public Draw() Draw(Canvas, int, int) Initializes a new instance of the Draw class with a specified canvas and position coordinates. public Draw(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas on which to draw. x int The x-coordinate of the drawing position. y int The y-coordinate of the drawing position. Exceptions RestrictionException Thrown if the coordinates are negative. Methods CheckParameters(string[]) Validates the parameters for the draw command, ensuring they are non-negative integers. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the number of parameters is incorrect or the coordinate values are invalid. Execute() Executes the drawing command on the canvas using the specified coordinates. public override void Execute() Exceptions IndexOutOfRangeException Thrown when the parameters are out of the expected range. RestrictionException Thrown if the coordinates are negative. Exception Thrown for any other unexpected errors."
  },
  "api/Ase_AyushK.C._77356749.Filler.html": {
    "href": "api/Ase_AyushK.C._77356749.Filler.html",
    "title": "Class Filler | ASE_Help_Documentation",
    "keywords": "Class Filler Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command to set text on a canvas, with additional controls for text validation. public class Filler : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Filler Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Filler() Initializes a new instance of the Filler class. public Filler() Filler(Canvas, string) Initializes a new instance of the Filler class with a specified canvas and text. public Filler(Canvas c, string text) Parameters c Canvas The canvas on which to set the text. text string The text to set on the canvas. Exceptions ArgumentNullException Thrown when the text parameter is null. Methods CheckParameters(string[]) Validates the parameters for setting text. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the number of parameters is incorrect or the text parameter is invalid. Execute() Executes the text setting command on the canvas. public override void Execute() Exceptions RestrictionException Thrown when the text is null, empty, whitespace, or exceeds 100 characters in length. SetFilled(string) Sets the filled state of the shape using the specified string value. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string that determines whether the shape is filled (\"true\" or \"false\"). Exceptions CommandException Thrown if the string value is neither \"true\" nor \"false\"."
  },
  "api/Ase_AyushK.C._77356749.Form1.html": {
    "href": "api/Ase_AyushK.C._77356749.Form1.html",
    "title": "Class Form1 | ASE_Help_Documentation",
    "keywords": "Class Form1 Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/Ase_AyushK.C._77356749.GlobalConfig.html": {
    "href": "api/Ase_AyushK.C._77356749.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE_Help_Documentation",
    "keywords": "Class GlobalConfig Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Manages global configuration settings for canvas properties in drawing operations. public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets a value indicating whether the fill mode is enabled during drawing operations. When enabled, shapes will be filled rather than outlined. The default value is false. public static bool IsFillEnabled { get; set; } Property Value bool Remarks The value of IsFillEnabled should be updated to enable or disable fill mode. It should be a boolean value: true for enabled and false for disabled. MaxX Gets or sets the maximum X coordinate (width) of the canvas. This value defines the maximum horizontal position during drawing operations. The default value is 640 pixels. public static int MaxX { get; set; } Property Value int Remarks The value of MaxX should be updated if you want to change the canvas's horizontal limit. It should be a positive integer value. MaxY Gets or sets the maximum Y coordinate (height) of the canvas. This value defines the maximum vertical position during drawing operations. The default value is 480 pixels. public static int MaxY { get; set; } Property Value int Remarks The value of MaxY should be updated if you want to change the canvas's vertical limit. It should be a positive integer value. PenSize Gets or sets the global pen size used in drawing operations. The pen size determines the thickness of lines and strokes in drawing operations. A value of 1 indicates minimum pen thickness, and the default value is 1. public static int PenSize { get; set; } Property Value int Remarks The pen size can be adjusted according to the desired thickness of lines and strokes."
  },
  "api/Ase_AyushK.C._77356749.Methods.html": {
    "href": "api/Ase_AyushK.C._77356749.Methods.html",
    "title": "Class Methods | ASE_Help_Documentation",
    "keywords": "Class Methods Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents method for implementation that overrides certain restrictions and resets static field values. public class Methods : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method Methods Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Methods() Initializes a new instance of the Methods class. public Methods() Remarks This constructor removes method count restrictions by calling ReduceRestrictions twice. It also resets the values of specific private fields to 0. Methods ResetOrDecreaseCount(int) Updates the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set. Exceptions BOOSEException Thrown if the private field cannot be accessed. ResetOrDecreaseMethodCount(int) Updates the value of a private static field in the BOOSE.Method class. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set. Exceptions BOOSEException Thrown if the private field cannot be accessed."
  },
  "api/Ase_AyushK.C._77356749.Mover.html": {
    "href": "api/Ase_AyushK.C._77356749.Mover.html",
    "title": "Class Mover | ASE_Help_Documentation",
    "keywords": "Class Mover Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command to move a graphic pointer or element to user-specified coordinates on a canvas. public class Mover : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Mover Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Mover() Initializes a new instance of the Mover class without parameters. public Mover() Mover(Canvas, int, int) Initializes a new instance of the Mover class with specified x and y coordinates on a canvas. public Mover(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas where the move operation will be executed. x int The x-coordinate to move to. y int The y-coordinate to move to. Exceptions RestrictionException Thrown when the specified coordinates exceed the limit of 2000. Methods CheckParameters(string[]) Validates the parameters for the move command, ensuring they are integers within the required range. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters, expected to be two integers representing the x and y coordinates. Exceptions CommandException Thrown when the number of parameters is incorrect or the coordinates are not within the valid range. Execute() Executes the move operation by setting the graphic element's position to the specified coordinates. public override void Execute() Exceptions IndexOutOfRangeException Thrown when the parameters are out of the expected range. RestrictionException Thrown if coordinates exceed the maximum allowed value of 2000. Exception Thrown for any other unexpected errors."
  },
  "api/Ase_AyushK.C._77356749.PenColourChanger.html": {
    "href": "api/Ase_AyushK.C._77356749.PenColourChanger.html",
    "title": "Class PenColourChanger | ASE_Help_Documentation",
    "keywords": "Class PenColourChanger Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command to change the pen color on a canvas using specified RGB values. public class PenColourChanger : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters PenColourChanger Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PenColourChanger() Initializes a new instance of the PenColourChanger class. public PenColourChanger() PenColourChanger(Canvas, int, int, int) Initializes a new instance of the PenColourChanger class with specified RGB color values. public PenColourChanger(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas on which the pen color change will be applied. r int The red component of the color (0-255). g int The green component of the color (0-255). b int The blue component of the color (0-255). Methods CheckParameters(string[]) Validates the RGB parameters provided for the pen color change command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of strings representing RGB values. Exceptions CommandException Thrown when the number of parameters is incorrect or the RGB values are invalid. Execute() Executes the command to change the pen color on the canvas to the specified RGB values. public override void Execute() Exceptions IndexOutOfRangeException Thrown when the provided RGB parameters are out of the expected range. RestrictionException Thrown when any RGB value is outside the 0-255 range. Exception Thrown for any other unexpected errors during the execution."
  },
  "api/Ase_AyushK.C._77356749.PenSize.html": {
    "href": "api/Ase_AyushK.C._77356749.PenSize.html",
    "title": "Class PenSize | ASE_Help_Documentation",
    "keywords": "Class PenSize Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The PenSize class is responsible for validating and applying the pen size. It ensures the pen size: Is a non-negative integer. Does not exceed 100. If validation fails, a BOOSE.RestrictionException is thrown. Constructors PenSize() Initializes a new instance of the PenSize class with default values. public PenSize() Remarks This default constructor can be used when no initial pen size is provided. The pen size can be set later using the Execute() method. PenSize(Canvas, int) Initializes a new instance of the PenSize class with a specified Canvas and pen size. public PenSize(Canvas c, int pensize) Parameters c Canvas The BOOSE.Canvas object where the pen size will be applied. pensize int The desired pen size to be set. Remarks Use this constructor when creating the command with a known pen size and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the PenSize command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the pen size. Examples The following example demonstrates parameter validation: PenSize penSizeCommand = new PenSize(); penSizeCommand.CheckParameters(new string[] { \"10\" }); // No exception penSizeCommand.CheckParameters(new string[] { }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 1 parameter. Execute() Executes the PenSize command to set the pen size on the Canvas. public override void Execute() Examples The following example demonstrates how to use the PenSize class: Canvas myCanvas = new Canvas(); PenSize penSizeCommand = new PenSize(myCanvas, 10); penSizeCommand.Execute(); Remarks The method performs the following steps: Extracts the pen size parameter from the base class. Validates that the pen size is within the valid range (0 to 100). Sets the pen size using the SetPenSize(int) method. If the pen size is invalid (either too large or negative), a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the pen size exceeds 100 or is negative. SetPenSize(int) Sets the pen size using an integer argument. public void SetPenSize(int penSize) Parameters penSize int The pen size to set. Must be a non-negative integer. Remarks This method updates the global pen size setting in the application."
  },
  "api/Ase_AyushK.C._77356749.Rectangles.html": {
    "href": "api/Ase_AyushK.C._77356749.Rectangles.html",
    "title": "Class Rectangles | ASE_Help_Documentation",
    "keywords": "Class Rectangles Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Command for drawing rectangle by user specified dimensions. public class Rectangles : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Rectangles Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Rectangles() Assigning default constructor for Rectangle command. public Rectangles() Rectangles(Canvas, int, int) Initializes new instance for Rectangle command with specified canvas, width, and height. public Rectangles(Canvas canvas, int width, int height) Parameters canvas Canvas Canvas on which rectangle will be drawn. width int Width of the rectangle. height int Height of the rectangle. Methods CheckParameters(string[]) Validation of parameters for rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Array of strings representing width and the height of rectangle. Execute() Executes rectangle drawing command on canvas. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.Reset.html": {
    "href": "api/Ase_AyushK.C._77356749.Reset.html",
    "title": "Class Reset | ASE_Help_Documentation",
    "keywords": "Class Reset Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Creats command for resetting canvas to its initial clean state. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Assigning default constructor for Reset command. public Reset() Reset(Canvas) Initializes new instance for Reset command with specified canvas. public Reset(Canvas canvas) Parameters canvas Canvas The resetted canvas. Methods CheckParameters(string[]) Checks the parameters for Reset command NOTE This command doesn't require any parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters provided to the command. Execute() Executes further reset operation on canvas. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.Triangle.html": {
    "href": "api/Ase_AyushK.C._77356749.Triangle.html",
    "title": "Class Triangle | ASE_Help_Documentation",
    "keywords": "Class Triangle Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Craeting command to draw triangle with user specified dimensions. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Initializes new instance of the Triangle class with empty parameters. public Triangle() Triangle(Canvas, int, int) Initializes new instance of the Triangle class with canvas, length, height. public Triangle(Canvas canvas, int baseLength, int height) Parameters canvas Canvas Allocates canvas to draw baseLength int Base length of the triangle height int Height of the triangle Methods CheckParameters(string[]) Validates the parameters required to draw a triangle. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Array containing the base length and height as strings. Execute() Executes the command to draw triangle on the canvas. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.Writeto.html": {
    "href": "api/Ase_AyushK.C._77356749.Writeto.html",
    "title": "Class Writeto | ASE_Help_Documentation",
    "keywords": "Class Writeto Namespace Ase_AyushK.C._77356749 Assembly Ase-AyushK.C.-77356749.dll Represents a command that writes text to a canvas based on user input. public class Writeto : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Writeto Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Writeto() Initializes a new instance of the Writeto class without parameters. public Writeto() Writeto(Canvas, string) Initializes a new instance of the Writeto class with specified canvas and text. public Writeto(Canvas c, string text) Parameters c Canvas The canvas on which to write the text. text string The text to be written on the canvas. Methods CheckParameters(string[]) Checks the validity of parameters intended for writing text. Ensures exactly one valid string is provided. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters from which text is derived. Execute() Executes the writing of text to the canvas. Validates the text and processes it before writing. public override void Execute()"
  },
  "api/Ase_AyushK.C._77356749.html": {
    "href": "api/Ase_AyushK.C._77356749.html",
    "title": "Namespace Ase_AyushK.C._77356749 | ASE_Help_Documentation",
    "keywords": "Namespace Ase_AyushK.C._77356749 Classes AppArray Manages an array with dynamic type support, enabling operations such as initialization, indexing, and value manipulation. AppBoolean Represents a specialized boolean with customized restrictions. AppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. AppCast Represents a command that facilitates type conversion between different types of variables within the application, specifically casting from a real number to an integer. AppClear Represents a command to clear all elements from a canvas. AppConditionalCommand Represents a conditional command with additional functionality to reset or update a private field. AppElse Represents an 'else' command within the application, forming part of the conditional command structure. AppEnd AppEnd class extends ApplicationCompoundCommand to provide handling for ending syntax in control structures like if, while, and for loops. AppFor A class that extends BOOSE.For to include methods for modifying a private field in BOOSE.Boolean. AppIf Represents an 'if' command within the application, inheriting behavior from the ApplicationCompoundCommand. This class allows the execution of conditional logic based on specific criteria. AppInt AppInt class extends the Int class to implement application-specific restrictions related to integer operations. AppPeek Provides functionality for the \"peek\" operation on arrays, which is used to retrieve a value at a specified index. This class extends AppArray to provide specific functionality for the peek operation. AppPoke Provides functionality for the \"poke\" operation on arrays, which is used to set a value at a specified index. This class extends AppArray to provide specific functionality for the poke operation. AppPraser Provides functionality to parse and execute commands within a stored program. AppReal Represents an application-specific implementation of the BOOSE.Real class. This class provides specific behaviors that are tailored to meet the application's requirements and constraints. ApplicationCompoundCommand Represents a compound command that integrates with conditional commands to facilitate complex control flow operations. ApplicationStoredProgram Represents an application-specific stored program that manages commands and variables for execution. ApplicationWhile Represents a 'while' command within the application, inheriting behavior from the ApplicationCompoundCommand. Circles Represents a command to draw a circle on a canvas with a specified radius. Clear Provides functionality to clear all elements from a canvas. Commands Provides a factory for creating command objects based on string identifiers. This class extends BOOSE.CommandFactory and is responsible for creating various command instances. Draw Provides functionality to execute a draw command on a canvas at specified coordinates. Filler Represents a command to set text on a canvas, with additional controls for text validation. Form1 GlobalConfig Manages global configuration settings for canvas properties in drawing operations. Methods Represents method for implementation that overrides certain restrictions and resets static field values. Mover Represents a command to move a graphic pointer or element to user-specified coordinates on a canvas. PenColourChanger Represents a command to change the pen color on a canvas using specified RGB values. PenSize Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. Rectangles Command for drawing rectangle by user specified dimensions. Reset Creats command for resetting canvas to its initial clean state. Triangle Craeting command to draw triangle with user specified dimensions. Writeto Represents a command that writes text to a canvas based on user input."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE_Help_Documentation",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE_Help_Documentation",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE_Help_Documentation",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}